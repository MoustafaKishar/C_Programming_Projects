
MK_TrafficLight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c74  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000ce8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019e5  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9c  00000000  00000000  000028b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fda  00000000  00000000  00003355  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00004330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094e  00000000  00000000  00004650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001144  00000000  00000000  00004f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000060e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_1>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	dd 03       	fmulsu	r21, r21
  56:	e8 03       	fmulsu	r22, r16
  58:	f3 03       	fmuls	r23, r19
  5a:	fe 03       	fmulsu	r23, r22
  5c:	09 04       	cpc	r0, r9
  5e:	14 04       	cpc	r1, r4
  60:	1f 04       	cpc	r1, r15
  62:	2a 04       	cpc	r2, r10

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a1 36       	cpi	r26, 0x61	; 97
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  84:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <APP_init>:

#include "app.h"


void APP_init(void){
	LED_init(CARS_TL_GREEN_LED);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
	LED_init(CARS_TL_YELLOW_LED);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
	LED_init(CARS_TL_RED_LED);
  9c:	62 e0       	ldi	r22, 0x02	; 2
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
	
	LED_init(PED_TL_GREEN_LED);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
	LED_init(PED_TL_YELLOW_LED);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
	LED_init(PED_TL_RED_LED);
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 2d 01 	call	0x25a	; 0x25a <LED_init>
	
	Button_init(PED_BUTTON);
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 29 01 	call	0x252	; 0x252 <Button_init>
	external_interrupt_init(EXT0, RisingEdge);		// Rising Edge handles the long press
  c4:	63 e0       	ldi	r22, 0x03	; 3
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 3b 03 	call	0x676	; 0x676 <external_interrupt_init>

	currentMode = NormalMode;
  cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  d0:	08 95       	ret

000000d2 <APP_start>:
}

void APP_start(void){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	00 d0       	rcall	.+0      	; 0xd8 <APP_start+0x6>
  d8:	1f 92       	push	r1
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	cli();
  de:	f8 94       	cli
	sei();		// To restart the interrupt
  e0:	78 94       	sei
	while(1){
		if(currentMode == PedestrianMode){		// If button was pressed, perform Pedestrian Mode Logic
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	09 f0       	breq	.+2      	; 0xec <APP_start+0x1a>
  ea:	69 c0       	rjmp	.+210    	; 0x1be <APP_start+0xec>
			LED_turnOFF(PED_TL_RED_LED);
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	0e 94 35 01 	call	0x26a	; 0x26a <LED_turnOFF>
			PIN_Value greenLedValue = LOW, yellowLedValue = LOW, redLedValue = LOW;
  f2:	1b 82       	std	Y+3, r1	; 0x03
  f4:	1a 82       	std	Y+2, r1	; 0x02
  f6:	19 82       	std	Y+1, r1	; 0x01
			LED_get_state(CARS_TL_GREEN_LED, &greenLedValue);
  f8:	ae 01       	movw	r20, r28
  fa:	4d 5f       	subi	r20, 0xFD	; 253
  fc:	5f 4f       	sbci	r21, 0xFF	; 255
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 39 01 	call	0x272	; 0x272 <LED_get_state>
			LED_get_state(CARS_TL_YELLOW_LED, &yellowLedValue);
 106:	ae 01       	movw	r20, r28
 108:	4e 5f       	subi	r20, 0xFE	; 254
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 39 01 	call	0x272	; 0x272 <LED_get_state>
			LED_get_state(CARS_TL_RED_LED, &redLedValue);
 114:	ae 01       	movw	r20, r28
 116:	4f 5f       	subi	r20, 0xFF	; 255
 118:	5f 4f       	sbci	r21, 0xFF	; 255
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 39 01 	call	0x272	; 0x272 <LED_get_state>
		
			if(redLedValue == HIGH){
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	51 f4       	brne	.+20     	; 0x13c <APP_start+0x6a>
				LED_turnON(PED_TL_GREEN_LED);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
				LED_toggle_w_delay(CARS_TL_RED_LED, 5000);
 12e:	48 e8       	ldi	r20, 0x88	; 136
 130:	53 e1       	ldi	r21, 0x13	; 19
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 3c 01 	call	0x278	; 0x278 <LED_toggle_w_delay>
 13a:	29 c0       	rjmp	.+82     	; 0x18e <APP_start+0xbc>
			}else if(greenLedValue == HIGH || yellowLedValue == HIGH){
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	19 f0       	breq	.+6      	; 0x148 <APP_start+0x76>
 142:	8a 81       	ldd	r24, Y+2	; 0x02
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	19 f5       	brne	.+70     	; 0x18e <APP_start+0xbc>
				LED_turnON(PED_TL_RED_LED);
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
				TWO_LEDs_blink(PED_TL_YELLOW_LED, CARS_TL_YELLOW_LED, 20, 5000);
 150:	0f 2e       	mov	r0, r31
 152:	f8 e8       	ldi	r31, 0x88	; 136
 154:	ef 2e       	mov	r14, r31
 156:	f3 e1       	ldi	r31, 0x13	; 19
 158:	ff 2e       	mov	r15, r31
 15a:	f0 2d       	mov	r31, r0
 15c:	04 e1       	ldi	r16, 0x14	; 20
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 78 01 	call	0x2f0	; 0x2f0 <TWO_LEDs_blink>
				LED_turnOFF(CARS_TL_GREEN_LED);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 35 01 	call	0x26a	; 0x26a <LED_turnOFF>
				LED_turnOFF(PED_TL_RED_LED);
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 35 01 	call	0x26a	; 0x26a <LED_turnOFF>
				LED_turnON(PED_TL_GREEN_LED);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
				LED_toggle_w_delay(CARS_TL_RED_LED, 5000);
 182:	48 e8       	ldi	r20, 0x88	; 136
 184:	53 e1       	ldi	r21, 0x13	; 19
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 3c 01 	call	0x278	; 0x278 <LED_toggle_w_delay>
			}
			TWO_LEDs_blink(PED_TL_YELLOW_LED, CARS_TL_YELLOW_LED, 20, 5000);
 18e:	0f 2e       	mov	r0, r31
 190:	f8 e8       	ldi	r31, 0x88	; 136
 192:	ef 2e       	mov	r14, r31
 194:	f3 e1       	ldi	r31, 0x13	; 19
 196:	ff 2e       	mov	r15, r31
 198:	f0 2d       	mov	r31, r0
 19a:	04 e1       	ldi	r16, 0x14	; 20
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <TWO_LEDs_blink>
			LED_turnOFF(PED_TL_GREEN_LED);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 35 01 	call	0x26a	; 0x26a <LED_turnOFF>
			LED_turnON(PED_TL_RED_LED);
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
			currentMode = NormalMode;
 1b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 1bc:	92 cf       	rjmp	.-220    	; 0xe2 <APP_start+0x10>
		}else{	// If not, perform Normal Mode Logic
			LED_turnON(PED_TL_RED_LED);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
			LED_toggle_w_delay(CARS_TL_GREEN_LED, 5000);
 1c6:	48 e8       	ldi	r20, 0x88	; 136
 1c8:	53 e1       	ldi	r21, 0x13	; 19
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 3c 01 	call	0x278	; 0x278 <LED_toggle_w_delay>
			LED_blink(CARS_TL_YELLOW_LED, 20, 5000);
 1d2:	28 e8       	ldi	r18, 0x88	; 136
 1d4:	33 e1       	ldi	r19, 0x13	; 19
 1d6:	44 e1       	ldi	r20, 0x14	; 20
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_blink>
			LED_toggle_w_delay(CARS_TL_RED_LED, 5000);
 1e0:	48 e8       	ldi	r20, 0x88	; 136
 1e2:	53 e1       	ldi	r21, 0x13	; 19
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 3c 01 	call	0x278	; 0x278 <LED_toggle_w_delay>
			LED_blink(CARS_TL_YELLOW_LED, 20, 5000);
 1ec:	28 e8       	ldi	r18, 0x88	; 136
 1ee:	33 e1       	ldi	r19, 0x13	; 19
 1f0:	44 e1       	ldi	r20, 0x14	; 20
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 57 01 	call	0x2ae	; 0x2ae <LED_blink>
 1fa:	73 cf       	rjmp	.-282    	; 0xe2 <APP_start+0x10>

000001fc <__vector_1>:
		}
	}
}
		

ISR(EXT_INT_0){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	if(currentMode == NormalMode) // IF condition to handle the multi-press & long press
 21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 222:	81 11       	cpse	r24, r1
 224:	05 c0       	rjmp	.+10     	; 0x230 <__vector_1+0x34>
	{	
		currentMode = PedestrianMode;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		APP_start();
 22c:	0e 94 69 00 	call	0xd2	; 0xd2 <APP_start>
	}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <Button_init>:
 */ 

#include "button.h"

EN_ButtonError_t Button_init(PORT_Name port, PIN_Name pin){
	return DIO_initPin(port, pin, Input);
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_initPin>
}
 258:	08 95       	ret

0000025a <LED_init>:
EN_LEDError_t LED_turnOFF(PORT_Name port, PIN_Name pin){
	return DIO_writePin(port, pin, LOW);
}
EN_LEDError_t LED_toggle(PORT_Name port, PIN_Name pin){
	return DIO_togglePin(port, pin);
}
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	0e 94 ba 01 	call	0x374	; 0x374 <DIO_initPin>
 260:	08 95       	ret

00000262 <LED_turnON>:
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	0e 94 42 02 	call	0x484	; 0x484 <DIO_writePin>
 268:	08 95       	ret

0000026a <LED_turnOFF>:
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	0e 94 42 02 	call	0x484	; 0x484 <DIO_writePin>
 270:	08 95       	ret

00000272 <LED_get_state>:
EN_LEDError_t LED_get_state(PORT_Name port, PIN_Name pin, PIN_Value *value){
	return DIO_readPin(port, pin, value);
 272:	0e 94 ca 02 	call	0x594	; 0x594 <DIO_readPin>
}
 276:	08 95       	ret

00000278 <LED_toggle_w_delay>:
EN_LEDError_t LED_toggle_w_delay(PORT_Name port, PIN_Name pin, uint16_t delay_ms){
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	c8 2f       	mov	r28, r24
 282:	d6 2f       	mov	r29, r22
 284:	8a 01       	movw	r16, r20
	LED_turnON(port, pin);
 286:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
	EN_TIMERError_t timerError = TIMER0_delay_ms(delay_ms);
 28a:	c8 01       	movw	r24, r16
 28c:	0e 94 45 04 	call	0x88a	; 0x88a <TIMER0_delay_ms>
 290:	18 2f       	mov	r17, r24
	LED_turnOFF(port, pin);
 292:	6d 2f       	mov	r22, r29
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 35 01 	call	0x26a	; 0x26a <LED_turnOFF>
	if(timerError == NO_TIMER_ERROR){
 29a:	11 11       	cpse	r17, r1
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <LED_toggle_w_delay+0x2a>
		return NO_LED_ERROR;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <LED_toggle_w_delay+0x2c>
	}else{
		return WRONG_TIMER_INPUT;
 2a2:	85 e0       	ldi	r24, 0x05	; 5
	}
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	08 95       	ret

000002ae <LED_blink>:

EN_LEDError_t LED_blink(PORT_Name port, PIN_Name pin, uint8_t blinks, uint16_t delay_ms){
 2ae:	ef 92       	push	r14
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	e8 2e       	mov	r14, r24
 2bc:	f6 2e       	mov	r15, r22
 2be:	d4 2f       	mov	r29, r20
 2c0:	89 01       	movw	r16, r18
	uint8_t i;
	EN_LEDError_t error = NO_LED_ERROR;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
	for(i = 0; i<blinks; i++){
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	0b c0       	rjmp	.+22     	; 0x2de <LED_blink+0x30>
		error = LED_toggle_w_delay(port, pin, (delay_ms/blinks));
 2c8:	6d 2f       	mov	r22, r29
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	c8 01       	movw	r24, r16
 2ce:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__udivmodhi4>
 2d2:	ab 01       	movw	r20, r22
 2d4:	6f 2d       	mov	r22, r15
 2d6:	8e 2d       	mov	r24, r14
 2d8:	0e 94 3c 01 	call	0x278	; 0x278 <LED_toggle_w_delay>
}

EN_LEDError_t LED_blink(PORT_Name port, PIN_Name pin, uint8_t blinks, uint16_t delay_ms){
	uint8_t i;
	EN_LEDError_t error = NO_LED_ERROR;
	for(i = 0; i<blinks; i++){
 2dc:	cf 5f       	subi	r28, 0xFF	; 255
 2de:	cd 17       	cp	r28, r29
 2e0:	98 f3       	brcs	.-26     	; 0x2c8 <LED_blink+0x1a>
		error = LED_toggle_w_delay(port, pin, (delay_ms/blinks));
	}
	return error;
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	ef 90       	pop	r14
 2ee:	08 95       	ret

000002f0 <TWO_LEDs_blink>:

EN_LEDError_t TWO_LEDs_blink(PORT_Name port1, PIN_Name pin1, PORT_Name port2, PIN_Name pin2, uint8_t blinks, uint16_t delay_ms){
 2f0:	bf 92       	push	r11
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	c8 2e       	mov	r12, r24
 304:	d6 2e       	mov	r13, r22
 306:	14 2f       	mov	r17, r20
 308:	d2 2f       	mov	r29, r18
	uint8_t i;
	EN_TIMERError_t timerError = NO_TIMER_ERROR;
 30a:	b1 2c       	mov	r11, r1
	for(i = 0; i<blinks; i++){
 30c:	c0 e0       	ldi	r28, 0x00	; 0
 30e:	1a c0       	rjmp	.+52     	; 0x344 <TWO_LEDs_blink+0x54>
		LED_turnON(port1, pin1);
 310:	6d 2d       	mov	r22, r13
 312:	8c 2d       	mov	r24, r12
 314:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
		LED_turnON(port2, pin2);
 318:	6d 2f       	mov	r22, r29
 31a:	81 2f       	mov	r24, r17
 31c:	0e 94 31 01 	call	0x262	; 0x262 <LED_turnON>
		timerError = TIMER0_delay_ms(delay_ms/blinks);
 320:	60 2f       	mov	r22, r16
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	c7 01       	movw	r24, r14
 326:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__udivmodhi4>
 32a:	cb 01       	movw	r24, r22
 32c:	0e 94 45 04 	call	0x88a	; 0x88a <TIMER0_delay_ms>
 330:	b8 2e       	mov	r11, r24
		LED_turnOFF(port1, pin1);
 332:	6d 2d       	mov	r22, r13
 334:	8c 2d       	mov	r24, r12
 336:	0e 94 35 01 	call	0x26a	; 0x26a <LED_turnOFF>
		LED_turnOFF(port2, pin2);
 33a:	6d 2f       	mov	r22, r29
 33c:	81 2f       	mov	r24, r17
 33e:	0e 94 35 01 	call	0x26a	; 0x26a <LED_turnOFF>
}

EN_LEDError_t TWO_LEDs_blink(PORT_Name port1, PIN_Name pin1, PORT_Name port2, PIN_Name pin2, uint8_t blinks, uint16_t delay_ms){
	uint8_t i;
	EN_TIMERError_t timerError = NO_TIMER_ERROR;
	for(i = 0; i<blinks; i++){
 342:	cf 5f       	subi	r28, 0xFF	; 255
 344:	c0 17       	cp	r28, r16
 346:	20 f3       	brcs	.-56     	; 0x310 <TWO_LEDs_blink+0x20>
		LED_turnON(port2, pin2);
		timerError = TIMER0_delay_ms(delay_ms/blinks);
		LED_turnOFF(port1, pin1);
		LED_turnOFF(port2, pin2);
	}
	if(timerError == NO_TIMER_ERROR){
 348:	b1 10       	cpse	r11, r1
 34a:	02 c0       	rjmp	.+4      	; 0x350 <TWO_LEDs_blink+0x60>
		return NO_LED_ERROR;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	01 c0       	rjmp	.+2      	; 0x352 <TWO_LEDs_blink+0x62>
	}else{
		return WRONG_TIMER_INPUT;
 350:	85 e0       	ldi	r24, 0x05	; 5
	}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	08 95       	ret

00000366 <main>:
#include "APP/app.h"


int main(void)
{
	APP_init();
 366:	0e 94 46 00 	call	0x8c	; 0x8c <APP_init>
    //while (1) 
    //{
	APP_start();
 36a:	0e 94 69 00 	call	0xd2	; 0xd2 <APP_start>
    //}
}
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret

00000374 <DIO_initPin>:
		case PORTC: PORTC_DATA = value; break;
		case PORTD: PORTD_DATA = value; break;
		default: return WRONG_DIO_PORT; break;
	}
	return NO_DIO_ERROR;
}
 374:	84 30       	cpi	r24, 0x04	; 4
 376:	08 f0       	brcs	.+2      	; 0x37a <DIO_initPin+0x6>
 378:	7b c0       	rjmp	.+246    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 37a:	68 30       	cpi	r22, 0x08	; 8
 37c:	08 f0       	brcs	.+2      	; 0x380 <DIO_initPin+0xc>
 37e:	7a c0       	rjmp	.+244    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 380:	41 30       	cpi	r20, 0x01	; 1
 382:	c1 f5       	brne	.+112    	; 0x3f4 <DIO_initPin+0x80>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	91 f0       	breq	.+36     	; 0x3ac <DIO_initPin+0x38>
 388:	28 f0       	brcs	.+10     	; 0x394 <DIO_initPin+0x20>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	d9 f0       	breq	.+54     	; 0x3c4 <DIO_initPin+0x50>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	29 f1       	breq	.+74     	; 0x3dc <DIO_initPin+0x68>
 392:	72 c0       	rjmp	.+228    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 394:	2a b3       	in	r18, 0x1a	; 26
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_initPin+0x2c>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_initPin+0x28>
 3a4:	82 2b       	or	r24, r18
 3a6:	8a bb       	out	0x1a, r24	; 26
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	08 95       	ret
 3ac:	27 b3       	in	r18, 0x17	; 23
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_initPin+0x44>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_initPin+0x40>
 3bc:	82 2b       	or	r24, r18
 3be:	87 bb       	out	0x17, r24	; 23
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	08 95       	ret
 3c4:	24 b3       	in	r18, 0x14	; 20
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_initPin+0x5c>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_initPin+0x58>
 3d4:	82 2b       	or	r24, r18
 3d6:	84 bb       	out	0x14, r24	; 20
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	08 95       	ret
 3dc:	21 b3       	in	r18, 0x11	; 17
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_initPin+0x74>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_initPin+0x70>
 3ec:	82 2b       	or	r24, r18
 3ee:	81 bb       	out	0x11, r24	; 17
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
 3f4:	41 11       	cpse	r20, r1
 3f6:	42 c0       	rjmp	.+132    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	99 f0       	breq	.+38     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3fc:	28 f0       	brcs	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3fe:	82 30       	cpi	r24, 0x02	; 2
 400:	e9 f0       	breq	.+58     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 402:	83 30       	cpi	r24, 0x03	; 3
 404:	41 f1       	breq	.+80     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 406:	3c c0       	rjmp	.+120    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 408:	2a b3       	in	r18, 0x1a	; 26
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	82 23       	and	r24, r18
 41c:	8a bb       	out	0x1a, r24	; 26
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	08 95       	ret
 422:	27 b3       	in	r18, 0x17	; 23
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	80 95       	com	r24
 434:	82 23       	and	r24, r18
 436:	87 bb       	out	0x17, r24	; 23
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret
 43c:	24 b3       	in	r18, 0x14	; 20
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	84 bb       	out	0x14, r24	; 20
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
 456:	21 b3       	in	r18, 0x11	; 17
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	81 bb       	out	0x11, r24	; 17
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	08 95       	ret
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	08 95       	ret
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	08 95       	ret
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	08 95       	ret
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	08 95       	ret
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	08 95       	ret

00000484 <DIO_writePin>:

EN_DIOError_t DIO_writePin(PORT_Name port, PIN_Name pin, PIN_Value value){
	if(port<=PORTD){
 484:	84 30       	cpi	r24, 0x04	; 4
 486:	08 f0       	brcs	.+2      	; 0x48a <DIO_writePin+0x6>
 488:	7b c0       	rjmp	.+246    	; 0x580 <DIO_writePin+0xfc>
		if(pin<=Pin7){ // To check that pin & port entry are correct
 48a:	68 30       	cpi	r22, 0x08	; 8
 48c:	08 f0       	brcs	.+2      	; 0x490 <DIO_writePin+0xc>
 48e:	7a c0       	rjmp	.+244    	; 0x584 <DIO_writePin+0x100>
			if(value == HIGH){
 490:	41 30       	cpi	r20, 0x01	; 1
 492:	c1 f5       	brne	.+112    	; 0x504 <DIO_writePin+0x80>
				switch(port){
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	91 f0       	breq	.+36     	; 0x4bc <DIO_writePin+0x38>
 498:	28 f0       	brcs	.+10     	; 0x4a4 <DIO_writePin+0x20>
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	d9 f0       	breq	.+54     	; 0x4d4 <DIO_writePin+0x50>
 49e:	83 30       	cpi	r24, 0x03	; 3
 4a0:	29 f1       	breq	.+74     	; 0x4ec <DIO_writePin+0x68>
 4a2:	72 c0       	rjmp	.+228    	; 0x588 <DIO_writePin+0x104>
					case PORTA: SET_BIT(PORTA_DATA, pin); break;
 4a4:	2b b3       	in	r18, 0x1b	; 27
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_writePin+0x2c>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_writePin+0x28>
 4b4:	82 2b       	or	r24, r18
 4b6:	8b bb       	out	0x1b, r24	; 27
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
EN_DIOError_t DIO_writePin(PORT_Name port, PIN_Name pin, PIN_Value value){
	if(port<=PORTD){
		if(pin<=Pin7){ // To check that pin & port entry are correct
			if(value == HIGH){
				switch(port){
					case PORTA: SET_BIT(PORTA_DATA, pin); break;
 4ba:	08 95       	ret
					case PORTB: SET_BIT(PORTB_DATA, pin); break;
 4bc:	28 b3       	in	r18, 0x18	; 24
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_writePin+0x44>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_writePin+0x40>
 4cc:	82 2b       	or	r24, r18
 4ce:	88 bb       	out	0x18, r24	; 24
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
	if(port<=PORTD){
		if(pin<=Pin7){ // To check that pin & port entry are correct
			if(value == HIGH){
				switch(port){
					case PORTA: SET_BIT(PORTA_DATA, pin); break;
					case PORTB: SET_BIT(PORTB_DATA, pin); break;
 4d2:	08 95       	ret
					case PORTC: SET_BIT(PORTC_DATA, pin); break;
 4d4:	25 b3       	in	r18, 0x15	; 21
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_writePin+0x5c>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_writePin+0x58>
 4e4:	82 2b       	or	r24, r18
 4e6:	85 bb       	out	0x15, r24	; 21
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 4e8:	80 e0       	ldi	r24, 0x00	; 0
		if(pin<=Pin7){ // To check that pin & port entry are correct
			if(value == HIGH){
				switch(port){
					case PORTA: SET_BIT(PORTA_DATA, pin); break;
					case PORTB: SET_BIT(PORTB_DATA, pin); break;
					case PORTC: SET_BIT(PORTC_DATA, pin); break;
 4ea:	08 95       	ret
					case PORTD: SET_BIT(PORTD_DATA, pin); break;
 4ec:	22 b3       	in	r18, 0x12	; 18
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_writePin+0x74>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_writePin+0x70>
 4fc:	82 2b       	or	r24, r18
 4fe:	82 bb       	out	0x12, r24	; 18
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 500:	80 e0       	ldi	r24, 0x00	; 0
			if(value == HIGH){
				switch(port){
					case PORTA: SET_BIT(PORTA_DATA, pin); break;
					case PORTB: SET_BIT(PORTB_DATA, pin); break;
					case PORTC: SET_BIT(PORTC_DATA, pin); break;
					case PORTD: SET_BIT(PORTD_DATA, pin); break;
 502:	08 95       	ret
				}
			}
			else if(value == LOW){
 504:	41 11       	cpse	r20, r1
 506:	42 c0       	rjmp	.+132    	; 0x58c <DIO_writePin+0x108>
				switch(port){
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	99 f0       	breq	.+38     	; 0x532 <DIO_writePin+0xae>
 50c:	28 f0       	brcs	.+10     	; 0x518 <DIO_writePin+0x94>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	e9 f0       	breq	.+58     	; 0x54c <DIO_writePin+0xc8>
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	41 f1       	breq	.+80     	; 0x566 <DIO_writePin+0xe2>
 516:	3c c0       	rjmp	.+120    	; 0x590 <DIO_writePin+0x10c>
					case PORTA: CLEAR_BIT(PORTA_DATA, pin); break;
 518:	2b b3       	in	r18, 0x1b	; 27
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_writePin+0xa0>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_writePin+0x9c>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	8b bb       	out	0x1b, r24	; 27
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 52e:	80 e0       	ldi	r24, 0x00	; 0
					case PORTD: SET_BIT(PORTD_DATA, pin); break;
				}
			}
			else if(value == LOW){
				switch(port){
					case PORTA: CLEAR_BIT(PORTA_DATA, pin); break;
 530:	08 95       	ret
					case PORTB: CLEAR_BIT(PORTB_DATA, pin); break;
 532:	28 b3       	in	r18, 0x18	; 24
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_writePin+0xba>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_writePin+0xb6>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	88 bb       	out	0x18, r24	; 24
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 548:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
			else if(value == LOW){
				switch(port){
					case PORTA: CLEAR_BIT(PORTA_DATA, pin); break;
					case PORTB: CLEAR_BIT(PORTB_DATA, pin); break;
 54a:	08 95       	ret
					case PORTC: CLEAR_BIT(PORTC_DATA, pin); break;
 54c:	25 b3       	in	r18, 0x15	; 21
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_writePin+0xd4>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_writePin+0xd0>
 55c:	80 95       	com	r24
 55e:	82 23       	and	r24, r18
 560:	85 bb       	out	0x15, r24	; 21
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 562:	80 e0       	ldi	r24, 0x00	; 0
			}
			else if(value == LOW){
				switch(port){
					case PORTA: CLEAR_BIT(PORTA_DATA, pin); break;
					case PORTB: CLEAR_BIT(PORTB_DATA, pin); break;
					case PORTC: CLEAR_BIT(PORTC_DATA, pin); break;
 564:	08 95       	ret
					case PORTD: CLEAR_BIT(PORTD_DATA, pin); break;
 566:	22 b3       	in	r18, 0x12	; 18
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_writePin+0xee>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_writePin+0xea>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	82 bb       	out	0x12, r24	; 18
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 57c:	80 e0       	ldi	r24, 0x00	; 0
			else if(value == LOW){
				switch(port){
					case PORTA: CLEAR_BIT(PORTA_DATA, pin); break;
					case PORTB: CLEAR_BIT(PORTB_DATA, pin); break;
					case PORTC: CLEAR_BIT(PORTC_DATA, pin); break;
					case PORTD: CLEAR_BIT(PORTD_DATA, pin); break;
 57e:	08 95       	ret
			}
		}else{
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	08 95       	ret
			}
			else{
				return WRONG_DIO_PIN_VALUE; // Error Handling
			}
		}else{
			return WRONG_DIO_PIN; // Error Handling
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	08 95       	ret
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	08 95       	ret
					case PORTC: CLEAR_BIT(PORTC_DATA, pin); break;
					case PORTD: CLEAR_BIT(PORTD_DATA, pin); break;
				}
			}
			else{
				return WRONG_DIO_PIN_VALUE; // Error Handling
 58c:	84 e0       	ldi	r24, 0x04	; 4
 58e:	08 95       	ret
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 590:	80 e0       	ldi	r24, 0x00	; 0
}
 592:	08 95       	ret

00000594 <DIO_readPin>:

EN_DIOError_t DIO_readPin(PORT_Name port, PIN_Name pin, PIN_Value *value){
	if(port<=PORTD){
 594:	84 30       	cpi	r24, 0x04	; 4
 596:	08 f0       	brcs	.+2      	; 0x59a <DIO_readPin+0x6>
 598:	68 c0       	rjmp	.+208    	; 0x66a <DIO_readPin+0xd6>
		if(pin<=Pin7){ // To check that pin & port entry are correct
 59a:	68 30       	cpi	r22, 0x08	; 8
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <DIO_readPin+0xc>
 59e:	67 c0       	rjmp	.+206    	; 0x66e <DIO_readPin+0xda>
			switch(port){
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	f1 f0       	breq	.+60     	; 0x5e0 <DIO_readPin+0x4c>
 5a4:	30 f0       	brcs	.+12     	; 0x5b2 <DIO_readPin+0x1e>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	91 f1       	breq	.+100    	; 0x60e <DIO_readPin+0x7a>
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <DIO_readPin+0x1c>
 5ae:	46 c0       	rjmp	.+140    	; 0x63c <DIO_readPin+0xa8>
 5b0:	60 c0       	rjmp	.+192    	; 0x672 <DIO_readPin+0xde>
				case PORTA: *value = GET_BIT(PORTA_PINS, pin); break;
 5b2:	79 b3       	in	r23, 0x19	; 25
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	9c 01       	movw	r18, r24
 5ba:	06 2e       	mov	r0, r22
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_readPin+0x2e>
 5be:	22 0f       	add	r18, r18
 5c0:	33 1f       	adc	r19, r19
 5c2:	0a 94       	dec	r0
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_readPin+0x2a>
 5c6:	87 2f       	mov	r24, r23
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	82 23       	and	r24, r18
 5cc:	93 23       	and	r25, r19
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <DIO_readPin+0x40>
 5d0:	95 95       	asr	r25
 5d2:	87 95       	ror	r24
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <DIO_readPin+0x3c>
 5d8:	fa 01       	movw	r30, r20
 5da:	80 83       	st	Z, r24
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 5dc:	80 e0       	ldi	r24, 0x00	; 0

EN_DIOError_t DIO_readPin(PORT_Name port, PIN_Name pin, PIN_Value *value){
	if(port<=PORTD){
		if(pin<=Pin7){ // To check that pin & port entry are correct
			switch(port){
				case PORTA: *value = GET_BIT(PORTA_PINS, pin); break;
 5de:	08 95       	ret
				case PORTB: *value = GET_BIT(PORTB_PINS, pin); break;
 5e0:	76 b3       	in	r23, 0x16	; 22
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	9c 01       	movw	r18, r24
 5e8:	06 2e       	mov	r0, r22
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_readPin+0x5c>
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_readPin+0x58>
 5f4:	87 2f       	mov	r24, r23
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	82 23       	and	r24, r18
 5fa:	93 23       	and	r25, r19
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_readPin+0x6e>
 5fe:	95 95       	asr	r25
 600:	87 95       	ror	r24
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_readPin+0x6a>
 606:	fa 01       	movw	r30, r20
 608:	80 83       	st	Z, r24
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 60a:	80 e0       	ldi	r24, 0x00	; 0
EN_DIOError_t DIO_readPin(PORT_Name port, PIN_Name pin, PIN_Value *value){
	if(port<=PORTD){
		if(pin<=Pin7){ // To check that pin & port entry are correct
			switch(port){
				case PORTA: *value = GET_BIT(PORTA_PINS, pin); break;
				case PORTB: *value = GET_BIT(PORTB_PINS, pin); break;
 60c:	08 95       	ret
				case PORTC: *value = GET_BIT(PORTC_PINS, pin); break;
 60e:	73 b3       	in	r23, 0x13	; 19
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	9c 01       	movw	r18, r24
 616:	06 2e       	mov	r0, r22
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_readPin+0x8a>
 61a:	22 0f       	add	r18, r18
 61c:	33 1f       	adc	r19, r19
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_readPin+0x86>
 622:	87 2f       	mov	r24, r23
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	82 23       	and	r24, r18
 628:	93 23       	and	r25, r19
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_readPin+0x9c>
 62c:	95 95       	asr	r25
 62e:	87 95       	ror	r24
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_readPin+0x98>
 634:	fa 01       	movw	r30, r20
 636:	80 83       	st	Z, r24
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 638:	80 e0       	ldi	r24, 0x00	; 0
	if(port<=PORTD){
		if(pin<=Pin7){ // To check that pin & port entry are correct
			switch(port){
				case PORTA: *value = GET_BIT(PORTA_PINS, pin); break;
				case PORTB: *value = GET_BIT(PORTB_PINS, pin); break;
				case PORTC: *value = GET_BIT(PORTC_PINS, pin); break;
 63a:	08 95       	ret
				case PORTD: *value = GET_BIT(PORTD_PINS, pin); break;
 63c:	70 b3       	in	r23, 0x10	; 16
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	9c 01       	movw	r18, r24
 644:	06 2e       	mov	r0, r22
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_readPin+0xb8>
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_readPin+0xb4>
 650:	87 2f       	mov	r24, r23
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	82 23       	and	r24, r18
 656:	93 23       	and	r25, r19
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_readPin+0xca>
 65a:	95 95       	asr	r25
 65c:	87 95       	ror	r24
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_readPin+0xc6>
 662:	fa 01       	movw	r30, r20
 664:	80 83       	st	Z, r24
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 666:	80 e0       	ldi	r24, 0x00	; 0
		if(pin<=Pin7){ // To check that pin & port entry are correct
			switch(port){
				case PORTA: *value = GET_BIT(PORTA_PINS, pin); break;
				case PORTB: *value = GET_BIT(PORTB_PINS, pin); break;
				case PORTC: *value = GET_BIT(PORTC_PINS, pin); break;
				case PORTD: *value = GET_BIT(PORTD_PINS, pin); break;
 668:	08 95       	ret
			}
		}else{
			return WRONG_DIO_PIN; // Error Handling
		}
	}else{
		return WRONG_DIO_PORT;
 66a:	82 e0       	ldi	r24, 0x02	; 2
 66c:	08 95       	ret
				case PORTB: *value = GET_BIT(PORTB_PINS, pin); break;
				case PORTC: *value = GET_BIT(PORTC_PINS, pin); break;
				case PORTD: *value = GET_BIT(PORTD_PINS, pin); break;
			}
		}else{
			return WRONG_DIO_PIN; // Error Handling
 66e:	83 e0       	ldi	r24, 0x03	; 3
 670:	08 95       	ret
		}
	}else{
		return WRONG_DIO_PORT;
	}
	return NO_DIO_ERROR;
 672:	80 e0       	ldi	r24, 0x00	; 0
}
 674:	08 95       	ret

00000676 <external_interrupt_init>:


#include "external_interrupts.h"

EN_ExtIntError_t external_interrupt_init(External_Interrupt extInt, Interrupt_Sense intSense){
	sei();
 676:	78 94       	sei
	if(extInt == EXT0){
 678:	81 11       	cpse	r24, r1
 67a:	28 c0       	rjmp	.+80     	; 0x6cc <external_interrupt_init+0x56>
		switch(intSense){
 67c:	61 30       	cpi	r22, 0x01	; 1
 67e:	69 f0       	breq	.+26     	; 0x69a <external_interrupt_init+0x24>
 680:	28 f0       	brcs	.+10     	; 0x68c <external_interrupt_init+0x16>
 682:	62 30       	cpi	r22, 0x02	; 2
 684:	89 f0       	breq	.+34     	; 0x6a8 <external_interrupt_init+0x32>
 686:	63 30       	cpi	r22, 0x03	; 3
 688:	b1 f0       	breq	.+44     	; 0x6b6 <external_interrupt_init+0x40>
 68a:	5d c0       	rjmp	.+186    	; 0x746 <external_interrupt_init+0xd0>
			case LowLevel:		CLEAR_BIT(MCUCR, ISC00);
 68c:	85 b7       	in	r24, 0x35	; 53
 68e:	8e 7f       	andi	r24, 0xFE	; 254
 690:	85 bf       	out	0x35, r24	; 53
								CLEAR_BIT(MCUCR, ISC01);	break;
 692:	85 b7       	in	r24, 0x35	; 53
 694:	8d 7f       	andi	r24, 0xFD	; 253
 696:	85 bf       	out	0x35, r24	; 53
 698:	14 c0       	rjmp	.+40     	; 0x6c2 <external_interrupt_init+0x4c>
			case Any:			SET_BIT(MCUCR, ISC00);
 69a:	85 b7       	in	r24, 0x35	; 53
 69c:	81 60       	ori	r24, 0x01	; 1
 69e:	85 bf       	out	0x35, r24	; 53
								CLEAR_BIT(MCUCR, ISC01);	break;
 6a0:	85 b7       	in	r24, 0x35	; 53
 6a2:	8d 7f       	andi	r24, 0xFD	; 253
 6a4:	85 bf       	out	0x35, r24	; 53
 6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <external_interrupt_init+0x4c>
			case FallingEdge:	CLEAR_BIT(MCUCR, ISC00);
 6a8:	85 b7       	in	r24, 0x35	; 53
 6aa:	8e 7f       	andi	r24, 0xFE	; 254
 6ac:	85 bf       	out	0x35, r24	; 53
								SET_BIT(MCUCR, ISC01);		break;
 6ae:	85 b7       	in	r24, 0x35	; 53
 6b0:	82 60       	ori	r24, 0x02	; 2
 6b2:	85 bf       	out	0x35, r24	; 53
 6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <external_interrupt_init+0x4c>
			case RisingEdge:	SET_BIT(MCUCR, ISC00);
 6b6:	85 b7       	in	r24, 0x35	; 53
 6b8:	81 60       	ori	r24, 0x01	; 1
 6ba:	85 bf       	out	0x35, r24	; 53
								SET_BIT(MCUCR, ISC01);		break;
 6bc:	85 b7       	in	r24, 0x35	; 53
 6be:	82 60       	ori	r24, 0x02	; 2
 6c0:	85 bf       	out	0x35, r24	; 53
			default: return WRONG_INT_SENSE; break;	// Error Handling
		}
		SET_BIT(GICR, INT0);
 6c2:	8b b7       	in	r24, 0x3b	; 59
 6c4:	80 64       	ori	r24, 0x40	; 64
 6c6:	8b bf       	out	0x3b, r24	; 59
		}
		SET_BIT(GICR, INT2);
	}else{
		return WRONG_INT_CHANNEL;// Error Handling
	}
	return NO_INT_ERROR;
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	08 95       	ret
			case RisingEdge:	SET_BIT(MCUCR, ISC00);
								SET_BIT(MCUCR, ISC01);		break;
			default: return WRONG_INT_SENSE; break;	// Error Handling
		}
		SET_BIT(GICR, INT0);
	}else if(extInt == EXT1){
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	41 f5       	brne	.+80     	; 0x720 <external_interrupt_init+0xaa>
		switch(intSense){
 6d0:	61 30       	cpi	r22, 0x01	; 1
 6d2:	69 f0       	breq	.+26     	; 0x6ee <external_interrupt_init+0x78>
 6d4:	28 f0       	brcs	.+10     	; 0x6e0 <external_interrupt_init+0x6a>
 6d6:	62 30       	cpi	r22, 0x02	; 2
 6d8:	89 f0       	breq	.+34     	; 0x6fc <external_interrupt_init+0x86>
 6da:	63 30       	cpi	r22, 0x03	; 3
 6dc:	b1 f0       	breq	.+44     	; 0x70a <external_interrupt_init+0x94>
 6de:	35 c0       	rjmp	.+106    	; 0x74a <external_interrupt_init+0xd4>
			case LowLevel:		CLEAR_BIT(MCUCR, ISC10);
 6e0:	85 b7       	in	r24, 0x35	; 53
 6e2:	8b 7f       	andi	r24, 0xFB	; 251
 6e4:	85 bf       	out	0x35, r24	; 53
								CLEAR_BIT(MCUCR, ISC11);	break;
 6e6:	85 b7       	in	r24, 0x35	; 53
 6e8:	87 7f       	andi	r24, 0xF7	; 247
 6ea:	85 bf       	out	0x35, r24	; 53
 6ec:	14 c0       	rjmp	.+40     	; 0x716 <external_interrupt_init+0xa0>
			case Any:			SET_BIT(MCUCR, ISC10);
 6ee:	85 b7       	in	r24, 0x35	; 53
 6f0:	84 60       	ori	r24, 0x04	; 4
 6f2:	85 bf       	out	0x35, r24	; 53
								CLEAR_BIT(MCUCR, ISC11);	break;
 6f4:	85 b7       	in	r24, 0x35	; 53
 6f6:	87 7f       	andi	r24, 0xF7	; 247
 6f8:	85 bf       	out	0x35, r24	; 53
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <external_interrupt_init+0xa0>
			case FallingEdge:	CLEAR_BIT(MCUCR, ISC10);
 6fc:	85 b7       	in	r24, 0x35	; 53
 6fe:	8b 7f       	andi	r24, 0xFB	; 251
 700:	85 bf       	out	0x35, r24	; 53
								SET_BIT(MCUCR, ISC11);		break;
 702:	85 b7       	in	r24, 0x35	; 53
 704:	88 60       	ori	r24, 0x08	; 8
 706:	85 bf       	out	0x35, r24	; 53
 708:	06 c0       	rjmp	.+12     	; 0x716 <external_interrupt_init+0xa0>
			case RisingEdge:	SET_BIT(MCUCR, ISC10);
 70a:	85 b7       	in	r24, 0x35	; 53
 70c:	84 60       	ori	r24, 0x04	; 4
 70e:	85 bf       	out	0x35, r24	; 53
								SET_BIT(MCUCR, ISC11);		break;
 710:	85 b7       	in	r24, 0x35	; 53
 712:	88 60       	ori	r24, 0x08	; 8
 714:	85 bf       	out	0x35, r24	; 53
			default: return WRONG_INT_SENSE; break;	// Error Handling
		}
		SET_BIT(GICR, INT1);
 716:	8b b7       	in	r24, 0x3b	; 59
 718:	80 68       	ori	r24, 0x80	; 128
 71a:	8b bf       	out	0x3b, r24	; 59
		}
		SET_BIT(GICR, INT2);
	}else{
		return WRONG_INT_CHANNEL;// Error Handling
	}
	return NO_INT_ERROR;
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	08 95       	ret
			case RisingEdge:	SET_BIT(MCUCR, ISC10);
								SET_BIT(MCUCR, ISC11);		break;
			default: return WRONG_INT_SENSE; break;	// Error Handling
		}
		SET_BIT(GICR, INT1);
	}else if(extInt == EXT2){
 720:	82 30       	cpi	r24, 0x02	; 2
 722:	a9 f4       	brne	.+42     	; 0x74e <external_interrupt_init+0xd8>
		switch(intSense){
 724:	62 30       	cpi	r22, 0x02	; 2
 726:	19 f0       	breq	.+6      	; 0x72e <external_interrupt_init+0xb8>
 728:	63 30       	cpi	r22, 0x03	; 3
 72a:	29 f0       	breq	.+10     	; 0x736 <external_interrupt_init+0xc0>
 72c:	12 c0       	rjmp	.+36     	; 0x752 <external_interrupt_init+0xdc>
			case FallingEdge:	CLEAR_BIT(MCUCSR, ISC2);	break;
 72e:	84 b7       	in	r24, 0x34	; 52
 730:	8f 7b       	andi	r24, 0xBF	; 191
 732:	84 bf       	out	0x34, r24	; 52
 734:	03 c0       	rjmp	.+6      	; 0x73c <external_interrupt_init+0xc6>
			case RisingEdge:	SET_BIT(MCUCSR, ISC2);		break;
 736:	84 b7       	in	r24, 0x34	; 52
 738:	80 64       	ori	r24, 0x40	; 64
 73a:	84 bf       	out	0x34, r24	; 52
			default: return WRONG_INT_SENSE; break;	// Error Handling
		}
		SET_BIT(GICR, INT2);
 73c:	8b b7       	in	r24, 0x3b	; 59
 73e:	80 62       	ori	r24, 0x20	; 32
 740:	8b bf       	out	0x3b, r24	; 59
	}else{
		return WRONG_INT_CHANNEL;// Error Handling
	}
	return NO_INT_ERROR;
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret
								CLEAR_BIT(MCUCR, ISC01);	break;
			case FallingEdge:	CLEAR_BIT(MCUCR, ISC00);
								SET_BIT(MCUCR, ISC01);		break;
			case RisingEdge:	SET_BIT(MCUCR, ISC00);
								SET_BIT(MCUCR, ISC01);		break;
			default: return WRONG_INT_SENSE; break;	// Error Handling
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
								CLEAR_BIT(MCUCR, ISC11);	break;
			case FallingEdge:	CLEAR_BIT(MCUCR, ISC10);
								SET_BIT(MCUCR, ISC11);		break;
			case RisingEdge:	SET_BIT(MCUCR, ISC10);
								SET_BIT(MCUCR, ISC11);		break;
			default: return WRONG_INT_SENSE; break;	// Error Handling
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	08 95       	ret
			case RisingEdge:	SET_BIT(MCUCSR, ISC2);		break;
			default: return WRONG_INT_SENSE; break;	// Error Handling
		}
		SET_BIT(GICR, INT2);
	}else{
		return WRONG_INT_CHANNEL;// Error Handling
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	08 95       	ret
		SET_BIT(GICR, INT1);
	}else if(extInt == EXT2){
		switch(intSense){
			case FallingEdge:	CLEAR_BIT(MCUCSR, ISC2);	break;
			case RisingEdge:	SET_BIT(MCUCSR, ISC2);		break;
			default: return WRONG_INT_SENSE; break;	// Error Handling
 752:	81 e0       	ldi	r24, 0x01	; 1
		SET_BIT(GICR, INT2);
	}else{
		return WRONG_INT_CHANNEL;// Error Handling
	}
	return NO_INT_ERROR;
 754:	08 95       	ret

00000756 <TIMER0_init>:
	return NO_TIMER_ERROR;
}
EN_TIMERError_t TIMER0_getState(uint8_t *currentTime){
	*currentTime = TCNT0;
	return NO_TIMER_ERROR;
}
 756:	81 30       	cpi	r24, 0x01	; 1
 758:	69 f0       	breq	.+26     	; 0x774 <TIMER0_init+0x1e>
 75a:	28 f0       	brcs	.+10     	; 0x766 <TIMER0_init+0x10>
 75c:	82 30       	cpi	r24, 0x02	; 2
 75e:	89 f0       	breq	.+34     	; 0x782 <TIMER0_init+0x2c>
 760:	83 30       	cpi	r24, 0x03	; 3
 762:	b1 f0       	breq	.+44     	; 0x790 <TIMER0_init+0x3a>
 764:	1e c0       	rjmp	.+60     	; 0x7a2 <TIMER0_init+0x4c>
 766:	83 b7       	in	r24, 0x33	; 51
 768:	8f 7b       	andi	r24, 0xBF	; 191
 76a:	83 bf       	out	0x33, r24	; 51
 76c:	83 b7       	in	r24, 0x33	; 51
 76e:	87 7f       	andi	r24, 0xF7	; 247
 770:	83 bf       	out	0x33, r24	; 51
 772:	14 c0       	rjmp	.+40     	; 0x79c <TIMER0_init+0x46>
 774:	83 b7       	in	r24, 0x33	; 51
 776:	80 64       	ori	r24, 0x40	; 64
 778:	83 bf       	out	0x33, r24	; 51
 77a:	83 b7       	in	r24, 0x33	; 51
 77c:	87 7f       	andi	r24, 0xF7	; 247
 77e:	83 bf       	out	0x33, r24	; 51
 780:	0d c0       	rjmp	.+26     	; 0x79c <TIMER0_init+0x46>
 782:	83 b7       	in	r24, 0x33	; 51
 784:	8f 7b       	andi	r24, 0xBF	; 191
 786:	83 bf       	out	0x33, r24	; 51
 788:	83 b7       	in	r24, 0x33	; 51
 78a:	88 60       	ori	r24, 0x08	; 8
 78c:	83 bf       	out	0x33, r24	; 51
 78e:	06 c0       	rjmp	.+12     	; 0x79c <TIMER0_init+0x46>
 790:	83 b7       	in	r24, 0x33	; 51
 792:	80 64       	ori	r24, 0x40	; 64
 794:	83 bf       	out	0x33, r24	; 51
 796:	83 b7       	in	r24, 0x33	; 51
 798:	88 60       	ori	r24, 0x08	; 8
 79a:	83 bf       	out	0x33, r24	; 51
 79c:	12 be       	out	0x32, r1	; 50
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	08 95       	ret
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	08 95       	ret

000007a6 <TIMER0_start>:
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	88 30       	cpi	r24, 0x08	; 8
 7aa:	91 05       	cpc	r25, r1
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <TIMER0_start+0xa>
 7ae:	5d c0       	rjmp	.+186    	; 0x86a <__stack+0xb>
 7b0:	fc 01       	movw	r30, r24
 7b2:	e6 5d       	subi	r30, 0xD6	; 214
 7b4:	ff 4f       	sbci	r31, 0xFF	; 255
 7b6:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__tablejump2__>
 7ba:	83 b7       	in	r24, 0x33	; 51
 7bc:	8e 7f       	andi	r24, 0xFE	; 254
 7be:	83 bf       	out	0x33, r24	; 51
 7c0:	83 b7       	in	r24, 0x33	; 51
 7c2:	8d 7f       	andi	r24, 0xFD	; 253
 7c4:	83 bf       	out	0x33, r24	; 51
 7c6:	83 b7       	in	r24, 0x33	; 51
 7c8:	8b 7f       	andi	r24, 0xFB	; 251
 7ca:	83 bf       	out	0x33, r24	; 51
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	08 95       	ret
 7d0:	83 b7       	in	r24, 0x33	; 51
 7d2:	81 60       	ori	r24, 0x01	; 1
 7d4:	83 bf       	out	0x33, r24	; 51
 7d6:	83 b7       	in	r24, 0x33	; 51
 7d8:	8d 7f       	andi	r24, 0xFD	; 253
 7da:	83 bf       	out	0x33, r24	; 51
 7dc:	83 b7       	in	r24, 0x33	; 51
 7de:	8b 7f       	andi	r24, 0xFB	; 251
 7e0:	83 bf       	out	0x33, r24	; 51
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
 7e6:	83 b7       	in	r24, 0x33	; 51
 7e8:	8e 7f       	andi	r24, 0xFE	; 254
 7ea:	83 bf       	out	0x33, r24	; 51
 7ec:	83 b7       	in	r24, 0x33	; 51
 7ee:	82 60       	ori	r24, 0x02	; 2
 7f0:	83 bf       	out	0x33, r24	; 51
 7f2:	83 b7       	in	r24, 0x33	; 51
 7f4:	8b 7f       	andi	r24, 0xFB	; 251
 7f6:	83 bf       	out	0x33, r24	; 51
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	08 95       	ret
 7fc:	83 b7       	in	r24, 0x33	; 51
 7fe:	81 60       	ori	r24, 0x01	; 1
 800:	83 bf       	out	0x33, r24	; 51
 802:	83 b7       	in	r24, 0x33	; 51
 804:	82 60       	ori	r24, 0x02	; 2
 806:	83 bf       	out	0x33, r24	; 51
 808:	83 b7       	in	r24, 0x33	; 51
 80a:	8b 7f       	andi	r24, 0xFB	; 251
 80c:	83 bf       	out	0x33, r24	; 51
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	08 95       	ret
 812:	83 b7       	in	r24, 0x33	; 51
 814:	8e 7f       	andi	r24, 0xFE	; 254
 816:	83 bf       	out	0x33, r24	; 51
 818:	83 b7       	in	r24, 0x33	; 51
 81a:	8d 7f       	andi	r24, 0xFD	; 253
 81c:	83 bf       	out	0x33, r24	; 51
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	84 60       	ori	r24, 0x04	; 4
 822:	83 bf       	out	0x33, r24	; 51
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	08 95       	ret
 828:	83 b7       	in	r24, 0x33	; 51
 82a:	81 60       	ori	r24, 0x01	; 1
 82c:	83 bf       	out	0x33, r24	; 51
 82e:	83 b7       	in	r24, 0x33	; 51
 830:	8d 7f       	andi	r24, 0xFD	; 253
 832:	83 bf       	out	0x33, r24	; 51
 834:	83 b7       	in	r24, 0x33	; 51
 836:	84 60       	ori	r24, 0x04	; 4
 838:	83 bf       	out	0x33, r24	; 51
 83a:	80 e0       	ldi	r24, 0x00	; 0
 83c:	08 95       	ret
 83e:	83 b7       	in	r24, 0x33	; 51
 840:	8e 7f       	andi	r24, 0xFE	; 254
 842:	83 bf       	out	0x33, r24	; 51
 844:	83 b7       	in	r24, 0x33	; 51
 846:	82 60       	ori	r24, 0x02	; 2
 848:	83 bf       	out	0x33, r24	; 51
 84a:	83 b7       	in	r24, 0x33	; 51
 84c:	84 60       	ori	r24, 0x04	; 4
 84e:	83 bf       	out	0x33, r24	; 51
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	08 95       	ret
 854:	83 b7       	in	r24, 0x33	; 51
 856:	81 60       	ori	r24, 0x01	; 1
 858:	83 bf       	out	0x33, r24	; 51
 85a:	83 b7       	in	r24, 0x33	; 51
 85c:	82 60       	ori	r24, 0x02	; 2
 85e:	83 bf       	out	0x33, r24	; 51
 860:	83 b7       	in	r24, 0x33	; 51
 862:	84 60       	ori	r24, 0x04	; 4
 864:	83 bf       	out	0x33, r24	; 51
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	08 95       	ret
 86a:	82 e0       	ldi	r24, 0x02	; 2
 86c:	08 95       	ret

0000086e <TIMER0_stop>:
 86e:	83 b7       	in	r24, 0x33	; 51
 870:	8e 7f       	andi	r24, 0xFE	; 254
 872:	83 bf       	out	0x33, r24	; 51
 874:	83 b7       	in	r24, 0x33	; 51
 876:	8d 7f       	andi	r24, 0xFD	; 253
 878:	83 bf       	out	0x33, r24	; 51
 87a:	83 b7       	in	r24, 0x33	; 51
 87c:	8b 7f       	andi	r24, 0xFB	; 251
 87e:	83 bf       	out	0x33, r24	; 51
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	08 95       	ret

00000884 <TIMER0_set>:
 884:	82 bf       	out	0x32, r24	; 50
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret

0000088a <TIMER0_delay_ms>:

EN_TIMERError_t TIMER0_delay_ms(uint16_t delay){
 88a:	cf 92       	push	r12
 88c:	df 92       	push	r13
 88e:	ef 92       	push	r14
 890:	ff 92       	push	r15
 892:	0f 93       	push	r16
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	ec 01       	movw	r28, r24
	EN_TIMERError_t timerIntError = TIMER0_init(Normal);
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	0e 94 ab 03 	call	0x756	; 0x756 <TIMER0_init>
 8a2:	c8 2e       	mov	r12, r24
	EN_TIMERError_t timerPreError = NO_TIMER_ERROR;
	uint16_t no_of_iter = 0;
	uint16_t start;
	if(delay<=256){
 8a4:	c1 30       	cpi	r28, 0x01	; 1
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	d8 07       	cpc	r29, r24
 8aa:	40 f4       	brcc	.+16     	; 0x8bc <TIMER0_delay_ms+0x32>
		no_of_iter = 1;
		start = 256-delay;
 8ac:	20 e0       	ldi	r18, 0x00	; 0
 8ae:	31 e0       	ldi	r19, 0x01	; 1
 8b0:	79 01       	movw	r14, r18
 8b2:	ec 1a       	sub	r14, r28
 8b4:	fd 0a       	sbc	r15, r29
	EN_TIMERError_t timerIntError = TIMER0_init(Normal);
	EN_TIMERError_t timerPreError = NO_TIMER_ERROR;
	uint16_t no_of_iter = 0;
	uint16_t start;
	if(delay<=256){
		no_of_iter = 1;
 8b6:	01 e0       	ldi	r16, 0x01	; 1
 8b8:	10 e0       	ldi	r17, 0x00	; 0
 8ba:	19 c0       	rjmp	.+50     	; 0x8ee <TIMER0_delay_ms+0x64>
		start = 256-delay;
		}else{
		no_of_iter = (uint16_t) ceil(delay/256.0);
 8bc:	be 01       	movw	r22, r28
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__floatunsisf>
 8c6:	20 e0       	ldi	r18, 0x00	; 0
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	40 e8       	ldi	r20, 0x80	; 128
 8cc:	5b e3       	ldi	r21, 0x3B	; 59
 8ce:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsf3>
 8d2:	0e 94 9c 04 	call	0x938	; 0x938 <ceil>
 8d6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixunssfsi>
 8da:	8b 01       	movw	r16, r22
		start = 256 - delay/no_of_iter;
 8dc:	ce 01       	movw	r24, r28
 8de:	b8 01       	movw	r22, r16
 8e0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__udivmodhi4>
 8e4:	20 e0       	ldi	r18, 0x00	; 0
 8e6:	31 e0       	ldi	r19, 0x01	; 1
 8e8:	79 01       	movw	r14, r18
 8ea:	e6 1a       	sub	r14, r22
 8ec:	f7 0a       	sbc	r15, r23
	}
	uint16_t i;
	for(i=0; i<no_of_iter; i++){
 8ee:	c0 e0       	ldi	r28, 0x00	; 0
 8f0:	d0 e0       	ldi	r29, 0x00	; 0
	return NO_TIMER_ERROR;
}

EN_TIMERError_t TIMER0_delay_ms(uint16_t delay){
	EN_TIMERError_t timerIntError = TIMER0_init(Normal);
	EN_TIMERError_t timerPreError = NO_TIMER_ERROR;
 8f2:	d1 2c       	mov	r13, r1
		}else{
		no_of_iter = (uint16_t) ceil(delay/256.0);
		start = 256 - delay/no_of_iter;
	}
	uint16_t i;
	for(i=0; i<no_of_iter; i++){
 8f4:	0e c0       	rjmp	.+28     	; 0x912 <TIMER0_delay_ms+0x88>
		TIMER0_set(start);
 8f6:	8e 2d       	mov	r24, r14
 8f8:	0e 94 42 04 	call	0x884	; 0x884 <TIMER0_set>
		timerPreError = TIMER0_start(PRESCALER_1024);
 8fc:	85 e0       	ldi	r24, 0x05	; 5
 8fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <TIMER0_start>
 902:	d8 2e       	mov	r13, r24
		while(GET_BIT(TIFR, TOV0) == 0);
 904:	08 b6       	in	r0, 0x38	; 56
 906:	00 fe       	sbrs	r0, 0
 908:	fd cf       	rjmp	.-6      	; 0x904 <TIMER0_delay_ms+0x7a>
		SET_BIT(TIFR, TOV0);
 90a:	98 b7       	in	r25, 0x38	; 56
 90c:	91 60       	ori	r25, 0x01	; 1
 90e:	98 bf       	out	0x38, r25	; 56
		}else{
		no_of_iter = (uint16_t) ceil(delay/256.0);
		start = 256 - delay/no_of_iter;
	}
	uint16_t i;
	for(i=0; i<no_of_iter; i++){
 910:	21 96       	adiw	r28, 0x01	; 1
 912:	c0 17       	cp	r28, r16
 914:	d1 07       	cpc	r29, r17
 916:	78 f3       	brcs	.-34     	; 0x8f6 <TIMER0_delay_ms+0x6c>
		TIMER0_set(start);
		timerPreError = TIMER0_start(PRESCALER_1024);
		while(GET_BIT(TIFR, TOV0) == 0);
		SET_BIT(TIFR, TOV0);
	}
	TIMER0_stop();
 918:	0e 94 37 04 	call	0x86e	; 0x86e <TIMER0_stop>
	if(timerIntError == NO_TIMER_ERROR){
 91c:	c1 10       	cpse	r12, r1
 91e:	02 c0       	rjmp	.+4      	; 0x924 <TIMER0_delay_ms+0x9a>
		return timerPreError;
 920:	8d 2d       	mov	r24, r13
 922:	01 c0       	rjmp	.+2      	; 0x926 <TIMER0_delay_ms+0x9c>
	}else{
		return timerIntError;
 924:	8c 2d       	mov	r24, r12
	}
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	ff 90       	pop	r15
 930:	ef 90       	pop	r14
 932:	df 90       	pop	r13
 934:	cf 90       	pop	r12
 936:	08 95       	ret

00000938 <ceil>:
 938:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fp_trunc>
 93c:	90 f0       	brcs	.+36     	; 0x962 <ceil+0x2a>
 93e:	9f 37       	cpi	r25, 0x7F	; 127
 940:	48 f4       	brcc	.+18     	; 0x954 <ceil+0x1c>
 942:	91 11       	cpse	r25, r1
 944:	16 f4       	brtc	.+4      	; 0x94a <ceil+0x12>
 946:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	70 e0       	ldi	r23, 0x00	; 0
 94e:	80 e8       	ldi	r24, 0x80	; 128
 950:	9f e3       	ldi	r25, 0x3F	; 63
 952:	08 95       	ret
 954:	26 f0       	brts	.+8      	; 0x95e <ceil+0x26>
 956:	1b 16       	cp	r1, r27
 958:	61 1d       	adc	r22, r1
 95a:	71 1d       	adc	r23, r1
 95c:	81 1d       	adc	r24, r1
 95e:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_mintl>
 962:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__fp_mpack>

00000966 <__fixunssfsi>:
 966:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_splitA>
 96a:	88 f0       	brcs	.+34     	; 0x98e <__fixunssfsi+0x28>
 96c:	9f 57       	subi	r25, 0x7F	; 127
 96e:	98 f0       	brcs	.+38     	; 0x996 <__fixunssfsi+0x30>
 970:	b9 2f       	mov	r27, r25
 972:	99 27       	eor	r25, r25
 974:	b7 51       	subi	r27, 0x17	; 23
 976:	b0 f0       	brcs	.+44     	; 0x9a4 <__fixunssfsi+0x3e>
 978:	e1 f0       	breq	.+56     	; 0x9b2 <__fixunssfsi+0x4c>
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	1a f0       	brmi	.+6      	; 0x98a <__fixunssfsi+0x24>
 984:	ba 95       	dec	r27
 986:	c9 f7       	brne	.-14     	; 0x97a <__fixunssfsi+0x14>
 988:	14 c0       	rjmp	.+40     	; 0x9b2 <__fixunssfsi+0x4c>
 98a:	b1 30       	cpi	r27, 0x01	; 1
 98c:	91 f0       	breq	.+36     	; 0x9b2 <__fixunssfsi+0x4c>
 98e:	0e 94 82 05 	call	0xb04	; 0xb04 <__fp_zero>
 992:	b1 e0       	ldi	r27, 0x01	; 1
 994:	08 95       	ret
 996:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__fp_zero>
 99a:	67 2f       	mov	r22, r23
 99c:	78 2f       	mov	r23, r24
 99e:	88 27       	eor	r24, r24
 9a0:	b8 5f       	subi	r27, 0xF8	; 248
 9a2:	39 f0       	breq	.+14     	; 0x9b2 <__fixunssfsi+0x4c>
 9a4:	b9 3f       	cpi	r27, 0xF9	; 249
 9a6:	cc f3       	brlt	.-14     	; 0x99a <__fixunssfsi+0x34>
 9a8:	86 95       	lsr	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	b3 95       	inc	r27
 9b0:	d9 f7       	brne	.-10     	; 0x9a8 <__fixunssfsi+0x42>
 9b2:	3e f4       	brtc	.+14     	; 0x9c2 <__fixunssfsi+0x5c>
 9b4:	90 95       	com	r25
 9b6:	80 95       	com	r24
 9b8:	70 95       	com	r23
 9ba:	61 95       	neg	r22
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__floatunsisf>:
 9c4:	e8 94       	clt
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <__floatsisf+0x12>

000009c8 <__floatsisf>:
 9c8:	97 fb       	bst	r25, 7
 9ca:	3e f4       	brtc	.+14     	; 0x9da <__floatsisf+0x12>
 9cc:	90 95       	com	r25
 9ce:	80 95       	com	r24
 9d0:	70 95       	com	r23
 9d2:	61 95       	neg	r22
 9d4:	7f 4f       	sbci	r23, 0xFF	; 255
 9d6:	8f 4f       	sbci	r24, 0xFF	; 255
 9d8:	9f 4f       	sbci	r25, 0xFF	; 255
 9da:	99 23       	and	r25, r25
 9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x40>
 9de:	f9 2f       	mov	r31, r25
 9e0:	96 e9       	ldi	r25, 0x96	; 150
 9e2:	bb 27       	eor	r27, r27
 9e4:	93 95       	inc	r25
 9e6:	f6 95       	lsr	r31
 9e8:	87 95       	ror	r24
 9ea:	77 95       	ror	r23
 9ec:	67 95       	ror	r22
 9ee:	b7 95       	ror	r27
 9f0:	f1 11       	cpse	r31, r1
 9f2:	f8 cf       	rjmp	.-16     	; 0x9e4 <__floatsisf+0x1c>
 9f4:	fa f4       	brpl	.+62     	; 0xa34 <__floatsisf+0x6c>
 9f6:	bb 0f       	add	r27, r27
 9f8:	11 f4       	brne	.+4      	; 0x9fe <__floatsisf+0x36>
 9fa:	60 ff       	sbrs	r22, 0
 9fc:	1b c0       	rjmp	.+54     	; 0xa34 <__floatsisf+0x6c>
 9fe:	6f 5f       	subi	r22, 0xFF	; 255
 a00:	7f 4f       	sbci	r23, 0xFF	; 255
 a02:	8f 4f       	sbci	r24, 0xFF	; 255
 a04:	9f 4f       	sbci	r25, 0xFF	; 255
 a06:	16 c0       	rjmp	.+44     	; 0xa34 <__floatsisf+0x6c>
 a08:	88 23       	and	r24, r24
 a0a:	11 f0       	breq	.+4      	; 0xa10 <__floatsisf+0x48>
 a0c:	96 e9       	ldi	r25, 0x96	; 150
 a0e:	11 c0       	rjmp	.+34     	; 0xa32 <__floatsisf+0x6a>
 a10:	77 23       	and	r23, r23
 a12:	21 f0       	breq	.+8      	; 0xa1c <__floatsisf+0x54>
 a14:	9e e8       	ldi	r25, 0x8E	; 142
 a16:	87 2f       	mov	r24, r23
 a18:	76 2f       	mov	r23, r22
 a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__floatsisf+0x5e>
 a1c:	66 23       	and	r22, r22
 a1e:	71 f0       	breq	.+28     	; 0xa3c <__floatsisf+0x74>
 a20:	96 e8       	ldi	r25, 0x86	; 134
 a22:	86 2f       	mov	r24, r22
 a24:	70 e0       	ldi	r23, 0x00	; 0
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	2a f0       	brmi	.+10     	; 0xa34 <__floatsisf+0x6c>
 a2a:	9a 95       	dec	r25
 a2c:	66 0f       	add	r22, r22
 a2e:	77 1f       	adc	r23, r23
 a30:	88 1f       	adc	r24, r24
 a32:	da f7       	brpl	.-10     	; 0xa2a <__floatsisf+0x62>
 a34:	88 0f       	add	r24, r24
 a36:	96 95       	lsr	r25
 a38:	87 95       	ror	r24
 a3a:	97 f9       	bld	r25, 7
 a3c:	08 95       	ret

00000a3e <__fp_mintl>:
 a3e:	88 23       	and	r24, r24
 a40:	71 f4       	brne	.+28     	; 0xa5e <__fp_mintl+0x20>
 a42:	77 23       	and	r23, r23
 a44:	21 f0       	breq	.+8      	; 0xa4e <__fp_mintl+0x10>
 a46:	98 50       	subi	r25, 0x08	; 8
 a48:	87 2b       	or	r24, r23
 a4a:	76 2f       	mov	r23, r22
 a4c:	07 c0       	rjmp	.+14     	; 0xa5c <__fp_mintl+0x1e>
 a4e:	66 23       	and	r22, r22
 a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_mintl+0x18>
 a52:	99 27       	eor	r25, r25
 a54:	0d c0       	rjmp	.+26     	; 0xa70 <__fp_mintl+0x32>
 a56:	90 51       	subi	r25, 0x10	; 16
 a58:	86 2b       	or	r24, r22
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	2a f0       	brmi	.+10     	; 0xa6a <__fp_mintl+0x2c>
 a60:	9a 95       	dec	r25
 a62:	66 0f       	add	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	da f7       	brpl	.-10     	; 0xa60 <__fp_mintl+0x22>
 a6a:	88 0f       	add	r24, r24
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__fp_mpack>:
 a74:	9f 3f       	cpi	r25, 0xFF	; 255
 a76:	31 f0       	breq	.+12     	; 0xa84 <__fp_mpack_finite+0xc>

00000a78 <__fp_mpack_finite>:
 a78:	91 50       	subi	r25, 0x01	; 1
 a7a:	20 f4       	brcc	.+8      	; 0xa84 <__fp_mpack_finite+0xc>
 a7c:	87 95       	ror	r24
 a7e:	77 95       	ror	r23
 a80:	67 95       	ror	r22
 a82:	b7 95       	ror	r27
 a84:	88 0f       	add	r24, r24
 a86:	91 1d       	adc	r25, r1
 a88:	96 95       	lsr	r25
 a8a:	87 95       	ror	r24
 a8c:	97 f9       	bld	r25, 7
 a8e:	08 95       	ret

00000a90 <__fp_split3>:
 a90:	57 fd       	sbrc	r21, 7
 a92:	90 58       	subi	r25, 0x80	; 128
 a94:	44 0f       	add	r20, r20
 a96:	55 1f       	adc	r21, r21
 a98:	59 f0       	breq	.+22     	; 0xab0 <__fp_splitA+0x10>
 a9a:	5f 3f       	cpi	r21, 0xFF	; 255
 a9c:	71 f0       	breq	.+28     	; 0xaba <__fp_splitA+0x1a>
 a9e:	47 95       	ror	r20

00000aa0 <__fp_splitA>:
 aa0:	88 0f       	add	r24, r24
 aa2:	97 fb       	bst	r25, 7
 aa4:	99 1f       	adc	r25, r25
 aa6:	61 f0       	breq	.+24     	; 0xac0 <__fp_splitA+0x20>
 aa8:	9f 3f       	cpi	r25, 0xFF	; 255
 aaa:	79 f0       	breq	.+30     	; 0xaca <__fp_splitA+0x2a>
 aac:	87 95       	ror	r24
 aae:	08 95       	ret
 ab0:	12 16       	cp	r1, r18
 ab2:	13 06       	cpc	r1, r19
 ab4:	14 06       	cpc	r1, r20
 ab6:	55 1f       	adc	r21, r21
 ab8:	f2 cf       	rjmp	.-28     	; 0xa9e <__fp_split3+0xe>
 aba:	46 95       	lsr	r20
 abc:	f1 df       	rcall	.-30     	; 0xaa0 <__fp_splitA>
 abe:	08 c0       	rjmp	.+16     	; 0xad0 <__fp_splitA+0x30>
 ac0:	16 16       	cp	r1, r22
 ac2:	17 06       	cpc	r1, r23
 ac4:	18 06       	cpc	r1, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	f1 cf       	rjmp	.-30     	; 0xaac <__fp_splitA+0xc>
 aca:	86 95       	lsr	r24
 acc:	71 05       	cpc	r23, r1
 ace:	61 05       	cpc	r22, r1
 ad0:	08 94       	sec
 ad2:	08 95       	ret

00000ad4 <__fp_trunc>:
 ad4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_splitA>
 ad8:	a0 f0       	brcs	.+40     	; 0xb02 <__fp_trunc+0x2e>
 ada:	be e7       	ldi	r27, 0x7E	; 126
 adc:	b9 17       	cp	r27, r25
 ade:	88 f4       	brcc	.+34     	; 0xb02 <__fp_trunc+0x2e>
 ae0:	bb 27       	eor	r27, r27
 ae2:	9f 38       	cpi	r25, 0x8F	; 143
 ae4:	60 f4       	brcc	.+24     	; 0xafe <__fp_trunc+0x2a>
 ae6:	16 16       	cp	r1, r22
 ae8:	b1 1d       	adc	r27, r1
 aea:	67 2f       	mov	r22, r23
 aec:	78 2f       	mov	r23, r24
 aee:	88 27       	eor	r24, r24
 af0:	98 5f       	subi	r25, 0xF8	; 248
 af2:	f7 cf       	rjmp	.-18     	; 0xae2 <__fp_trunc+0xe>
 af4:	86 95       	lsr	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	b1 1d       	adc	r27, r1
 afc:	93 95       	inc	r25
 afe:	96 39       	cpi	r25, 0x96	; 150
 b00:	c8 f3       	brcs	.-14     	; 0xaf4 <__fp_trunc+0x20>
 b02:	08 95       	ret

00000b04 <__fp_zero>:
 b04:	e8 94       	clt

00000b06 <__fp_szero>:
 b06:	bb 27       	eor	r27, r27
 b08:	66 27       	eor	r22, r22
 b0a:	77 27       	eor	r23, r23
 b0c:	cb 01       	movw	r24, r22
 b0e:	97 f9       	bld	r25, 7
 b10:	08 95       	ret

00000b12 <__mulsf3>:
 b12:	0e 94 9c 05 	call	0xb38	; 0xb38 <__mulsf3x>
 b16:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__fp_round>
 b1a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fp_pscA>
 b1e:	38 f0       	brcs	.+14     	; 0xb2e <__mulsf3+0x1c>
 b20:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_pscB>
 b24:	20 f0       	brcs	.+8      	; 0xb2e <__mulsf3+0x1c>
 b26:	95 23       	and	r25, r21
 b28:	11 f0       	breq	.+4      	; 0xb2e <__mulsf3+0x1c>
 b2a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 b2e:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_nan>
 b32:	11 24       	eor	r1, r1
 b34:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>

00000b38 <__mulsf3x>:
 b38:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_split3>
 b3c:	70 f3       	brcs	.-36     	; 0xb1a <__mulsf3+0x8>

00000b3e <__mulsf3_pse>:
 b3e:	95 9f       	mul	r25, r21
 b40:	c1 f3       	breq	.-16     	; 0xb32 <__mulsf3+0x20>
 b42:	95 0f       	add	r25, r21
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	55 1f       	adc	r21, r21
 b48:	62 9f       	mul	r22, r18
 b4a:	f0 01       	movw	r30, r0
 b4c:	72 9f       	mul	r23, r18
 b4e:	bb 27       	eor	r27, r27
 b50:	f0 0d       	add	r31, r0
 b52:	b1 1d       	adc	r27, r1
 b54:	63 9f       	mul	r22, r19
 b56:	aa 27       	eor	r26, r26
 b58:	f0 0d       	add	r31, r0
 b5a:	b1 1d       	adc	r27, r1
 b5c:	aa 1f       	adc	r26, r26
 b5e:	64 9f       	mul	r22, r20
 b60:	66 27       	eor	r22, r22
 b62:	b0 0d       	add	r27, r0
 b64:	a1 1d       	adc	r26, r1
 b66:	66 1f       	adc	r22, r22
 b68:	82 9f       	mul	r24, r18
 b6a:	22 27       	eor	r18, r18
 b6c:	b0 0d       	add	r27, r0
 b6e:	a1 1d       	adc	r26, r1
 b70:	62 1f       	adc	r22, r18
 b72:	73 9f       	mul	r23, r19
 b74:	b0 0d       	add	r27, r0
 b76:	a1 1d       	adc	r26, r1
 b78:	62 1f       	adc	r22, r18
 b7a:	83 9f       	mul	r24, r19
 b7c:	a0 0d       	add	r26, r0
 b7e:	61 1d       	adc	r22, r1
 b80:	22 1f       	adc	r18, r18
 b82:	74 9f       	mul	r23, r20
 b84:	33 27       	eor	r19, r19
 b86:	a0 0d       	add	r26, r0
 b88:	61 1d       	adc	r22, r1
 b8a:	23 1f       	adc	r18, r19
 b8c:	84 9f       	mul	r24, r20
 b8e:	60 0d       	add	r22, r0
 b90:	21 1d       	adc	r18, r1
 b92:	82 2f       	mov	r24, r18
 b94:	76 2f       	mov	r23, r22
 b96:	6a 2f       	mov	r22, r26
 b98:	11 24       	eor	r1, r1
 b9a:	9f 57       	subi	r25, 0x7F	; 127
 b9c:	50 40       	sbci	r21, 0x00	; 0
 b9e:	9a f0       	brmi	.+38     	; 0xbc6 <__mulsf3_pse+0x88>
 ba0:	f1 f0       	breq	.+60     	; 0xbde <__mulsf3_pse+0xa0>
 ba2:	88 23       	and	r24, r24
 ba4:	4a f0       	brmi	.+18     	; 0xbb8 <__mulsf3_pse+0x7a>
 ba6:	ee 0f       	add	r30, r30
 ba8:	ff 1f       	adc	r31, r31
 baa:	bb 1f       	adc	r27, r27
 bac:	66 1f       	adc	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	91 50       	subi	r25, 0x01	; 1
 bb4:	50 40       	sbci	r21, 0x00	; 0
 bb6:	a9 f7       	brne	.-22     	; 0xba2 <__mulsf3_pse+0x64>
 bb8:	9e 3f       	cpi	r25, 0xFE	; 254
 bba:	51 05       	cpc	r21, r1
 bbc:	80 f0       	brcs	.+32     	; 0xbde <__mulsf3_pse+0xa0>
 bbe:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_inf>
 bc2:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_szero>
 bc6:	5f 3f       	cpi	r21, 0xFF	; 255
 bc8:	e4 f3       	brlt	.-8      	; 0xbc2 <__mulsf3_pse+0x84>
 bca:	98 3e       	cpi	r25, 0xE8	; 232
 bcc:	d4 f3       	brlt	.-12     	; 0xbc2 <__mulsf3_pse+0x84>
 bce:	86 95       	lsr	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b7 95       	ror	r27
 bd6:	f7 95       	ror	r31
 bd8:	e7 95       	ror	r30
 bda:	9f 5f       	subi	r25, 0xFF	; 255
 bdc:	c1 f7       	brne	.-16     	; 0xbce <__mulsf3_pse+0x90>
 bde:	fe 2b       	or	r31, r30
 be0:	88 0f       	add	r24, r24
 be2:	91 1d       	adc	r25, r1
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__fp_inf>:
 bec:	97 f9       	bld	r25, 7
 bee:	9f 67       	ori	r25, 0x7F	; 127
 bf0:	80 e8       	ldi	r24, 0x80	; 128
 bf2:	70 e0       	ldi	r23, 0x00	; 0
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	08 95       	ret

00000bf8 <__fp_nan>:
 bf8:	9f ef       	ldi	r25, 0xFF	; 255
 bfa:	80 ec       	ldi	r24, 0xC0	; 192
 bfc:	08 95       	ret

00000bfe <__fp_pscA>:
 bfe:	00 24       	eor	r0, r0
 c00:	0a 94       	dec	r0
 c02:	16 16       	cp	r1, r22
 c04:	17 06       	cpc	r1, r23
 c06:	18 06       	cpc	r1, r24
 c08:	09 06       	cpc	r0, r25
 c0a:	08 95       	ret

00000c0c <__fp_pscB>:
 c0c:	00 24       	eor	r0, r0
 c0e:	0a 94       	dec	r0
 c10:	12 16       	cp	r1, r18
 c12:	13 06       	cpc	r1, r19
 c14:	14 06       	cpc	r1, r20
 c16:	05 06       	cpc	r0, r21
 c18:	08 95       	ret

00000c1a <__fp_round>:
 c1a:	09 2e       	mov	r0, r25
 c1c:	03 94       	inc	r0
 c1e:	00 0c       	add	r0, r0
 c20:	11 f4       	brne	.+4      	; 0xc26 <__fp_round+0xc>
 c22:	88 23       	and	r24, r24
 c24:	52 f0       	brmi	.+20     	; 0xc3a <__fp_round+0x20>
 c26:	bb 0f       	add	r27, r27
 c28:	40 f4       	brcc	.+16     	; 0xc3a <__fp_round+0x20>
 c2a:	bf 2b       	or	r27, r31
 c2c:	11 f4       	brne	.+4      	; 0xc32 <__fp_round+0x18>
 c2e:	60 ff       	sbrs	r22, 0
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fp_round+0x20>
 c32:	6f 5f       	subi	r22, 0xFF	; 255
 c34:	7f 4f       	sbci	r23, 0xFF	; 255
 c36:	8f 4f       	sbci	r24, 0xFF	; 255
 c38:	9f 4f       	sbci	r25, 0xFF	; 255
 c3a:	08 95       	ret

00000c3c <__udivmodhi4>:
 c3c:	aa 1b       	sub	r26, r26
 c3e:	bb 1b       	sub	r27, r27
 c40:	51 e1       	ldi	r21, 0x11	; 17
 c42:	07 c0       	rjmp	.+14     	; 0xc52 <__udivmodhi4_ep>

00000c44 <__udivmodhi4_loop>:
 c44:	aa 1f       	adc	r26, r26
 c46:	bb 1f       	adc	r27, r27
 c48:	a6 17       	cp	r26, r22
 c4a:	b7 07       	cpc	r27, r23
 c4c:	10 f0       	brcs	.+4      	; 0xc52 <__udivmodhi4_ep>
 c4e:	a6 1b       	sub	r26, r22
 c50:	b7 0b       	sbc	r27, r23

00000c52 <__udivmodhi4_ep>:
 c52:	88 1f       	adc	r24, r24
 c54:	99 1f       	adc	r25, r25
 c56:	5a 95       	dec	r21
 c58:	a9 f7       	brne	.-22     	; 0xc44 <__udivmodhi4_loop>
 c5a:	80 95       	com	r24
 c5c:	90 95       	com	r25
 c5e:	bc 01       	movw	r22, r24
 c60:	cd 01       	movw	r24, r26
 c62:	08 95       	ret

00000c64 <__tablejump2__>:
 c64:	ee 0f       	add	r30, r30
 c66:	ff 1f       	adc	r31, r31
 c68:	05 90       	lpm	r0, Z+
 c6a:	f4 91       	lpm	r31, Z
 c6c:	e0 2d       	mov	r30, r0
 c6e:	09 94       	ijmp

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
